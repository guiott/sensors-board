** Description: This SW drives the Arduino board on reading some sensors in 
**		order to know the external environment and to instruct dsNavCon 
**		board, via serial communication, how to avoid obstacles and to 
**		find targets.   

-------------------------------------------------------------------------------
Copyright 2008 Guido Ottaviani
guido@guiott.com

    SensBrd.pde is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    SensBrd.pde is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SensBrd.pde.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------------------     

  

Arduino Board Pin assignment 
- 01 - Reset			Aref 01 - 

- 02 - 3V3			GND  02 -

- 03 - 5V	Internal LED, buzzer 03 - 13

- 04 - GND		       	     04 - 12

- 05 - GND		       LED 2 05 - 11

- 06 - Vin		   LED Green 06 - 10
			  LED Yellow 07 -  9
- 08 - AN0		     LED Red 08 -  8

- 09 - AN1		

- 10 - AN2		      Switch 01 -  7
- 11 - AN3	         Bumper Left 02 -  6

- 12 - AN4 SDA	       Bumper Center 03 -  5

- 13 - AN4 SCL	        Bumper Right 04 -  4
		     		     05 -  3
				     06 -  2
				  TX 07 -  1
				  RX 08 -  0


*******************************************************************************
[1]

This changes the address of SRF08. It is needed just once to change the default
address E0.
To change the I2C address of the SRF08 you must have only one sonar on the bus.
Write the 3 sequence commands in the correct order followed by the address. 
Example; to change the address of a sonar currently at 0xE0 (the default 
shipped address) to 0xF2, write the following to address 0xE0; (0xA0, 0xAA, 
0xA5, 0xF2 ).
These commands must be sent in the correct sequence to change the I2C address, 
additionally, No other command may be issued in the middle of the sequence. 
The sequence must be sent to the command register at location 0, which means 4 
separate write transactions on the I2C bus. 
When powering the SRF08 up without sending any commands it will flash its 
address out on the LED. One long flash followed by a number of shorter flashes 
indicating its address.
The flashing is terminated immediately on sending a command the SRF08.
usage example: SrfChangeAddress(0x70, 0xE6);
Valid addresses are:
Decimal	Hex Long Flash Short flashes
224 	E0 	1 	    0
226 	E2 	1 	    1
228 	E4 	1 	    2
230 	E6 	1 	    3
232 	E8 	1 	    4
234 	EA 	1 	    5
236 	EC 	1 	    6
238 	EE 	1 	    7
240 	F0 	1	    8
242 	F2 	1  	    9
244 	F4 	1   	   10
246 	F6 	1	   11
248 	F8 	1	   12
250 	FA 	1	   13
252 	FC 	1	   14
254 	FE 	1	   15

[1a]
The address specified in the datasheet is 224 (0xE0) but i2c adressing uses the
high 7 bits so it's 112
to measure in "inches" 0x50, 0x51 for centimeters, 0x52 for ping microseconds

[1b]
Analogue Gain
The analogue gain register sets the Maximum gain of the analogue stages. To set
the maximum gain, just write one of these values to the gain register at 
location 1. During a ranging, the analogue gain starts off at its minimum value
of 94. This is increased at approx. 70uS intervals up to the maximum gain 
setting, set by register 1. Maximum possible gain is reached after about 390mm 
of range. The purpose of providing a limit to the maximum gain is to allow you 
to fire the sonar more rapidly than 65mS. Since the ranging can be very short, 
a new ranging can be initiated as soon as the previous range data has been read
A potential hazard with this is that the second ranging may pick up a distant 
echo returning from the previous "ping", give a false result of a close by
object when there is none. To reduce this possibility, the maximum gain can be 
reduced to limit the modules sensitivity to the weaker distant echo, whilst 
still able to detect close by objects. The maximum gain setting is stored only 
in the CPU's RAM and is initialized to maximum on power-up, so if you only want
do a ranging every 65mS, or longer, you can ignore the Range and Gain Registers.
Note that the relationship between the Gain Register setting and the actual 
gain is not a linear one. Also there is no magic formula to say "use this gain 
setting with that range setting". It depends on the size, shape and material 
of the object and what else is around in the room. Try playing with different 
settings until you get the result you want. If you appear to get false readings
it may be echo's from previous "pings", try going back to firing the SRF08 
every 65mS or longer (slower).

Gain Register to Maximum Analogue Gain table (Decimal - Hex)
0 0x00 Set Maximum Analogue Gain to 94
1 0x01 Set Maximum Analogue Gain to 97
2 0x02 Set Maximum Analogue Gain to 100
3 0x03 Set Maximum Analogue Gain to 103
4 0x04 Set Maximum Analogue Gain to 107
5 0x05 Set Maximum Analogue Gain to 110
6 0x06 Set Maximum Analogue Gain to 114
7 0x07 Set Maximum Analogue Gain to 118
8 0x08 Set Maximum Analogue Gain to 123
9 0x09 Set Maximum Analogue Gain to 128
10 0x0A Set Maximum Analogue Gain to 133
11 0x0B Set Maximum Analogue Gain to 139
12 0x0C Set Maximum Analogue Gain to 145
13 0x0D Set Maximum Analogue Gain to 152
14 0x0E Set Maximum Analogue Gain to 159
15 0x0F Set Maximum Analogue Gain to 168
16 0x10 Set Maximum Analogue Gain to 177
17 0x11 Set Maximum Analogue Gain to 187
18 0x12 Set Maximum Analogue Gain to 199
19 0x13 Set Maximum Analogue Gain to 212
20 0x14 Set Maximum Analogue Gain to 227
21 0x15 Set Maximum Analogue Gain to 245
22 0x16 Set Maximum Analogue Gain to 265
23 0x17 Set Maximum Analogue Gain to 288
24 0x18 Set Maximum Analogue Gain to 317
25 0x18 Set Maximum Analogue Gain to 352
26 0x20 Set Maximum Analogue Gain to 395
27 0x21 Set Maximum Analogue Gain to 450
28 0x22 Set Maximum Analogue Gain to 524
29 0x23 Set Maximum Analogue Gain to 626
30 0x24 Set Maximum Analogue Gain to 777
31 0x25 Set Maximum Analogue Gain to 1025

[1c]
Changing the Range
The maximum range of the SRF08 is set by an internal timer. By default, this is
65mS or the equivalent of 11 metres of range. This is much further than the 6 
metres the SRF08 is actually capable of. 
It is possible to reduce the time the SRF08 listens for an echo, and hence the 
range, by writing to the range register at location 2. 
The range can be set in steps of about 43mm (0.043m or 1.68 inches) up to 11 
metres. The range is ((Range Register x 43mm) + 43mm) so setting the Range 
Register to 0 (0x00) gives a maximum range of 43mm. Setting the Range Register 
to 1 (0x01) gives a maximum range of 86mm. More usefully, 24 (0x18) gives a 
range of 1 metre and 140 (0x8C) is 6 metres. Setting 255 (0xFF) gives the 
original 11 metres (255 x 43 + 43 is 11008mm).

57 x 43 + 43 = 2494 mm range
@ 340 m/s -> (2494mm x 2) / 340m/s = 14,67 ms ping time

*******************************************************************************
[2]
reading of the sensors is done in sequence every 14 ms, giving enough  time to 
stabilize measurement for each kind of sensor.
SRF08 readings occur every 2 cycles (28ms) and US pings never happens at the
same time for two sensors. This is enough time since the gain and ranging for
these sensors are reduced.
A full reading cycle requires 7 x 14 = 98 ms. At the end data are transmitted.
Also the IR sensors GP2D120 return a measure every 40 ms.

*******************************************************************************
[3]
Reading the datasheet for the IR sensor GP2D120, we learn that the response
curve can be approximated with a 1/X trend, the output voltage is inversely
proportional to the distance from the object.
In order to use directly the ADC reading a conversion must be done.
The final formula is:
Dist = K / (ADCvalue - Offset)
K and Offset constants can be computed with just reading two values in the 
quasi-linear part of the response curve. I've chosen values of 4 cm for Dist1 
(ADCval1 = 2492) and  40 cm for Dist2 (ADCval2 = 278), still within the 
measurable range.
K = (ADCval2 - ADCval1) * Dist1 * Dist2 / (Dist2 - Dist1) = 9840
Offset = (Dist2 * ADCval2 - Dist1 * ADCval1) / (Dist2 - Dist1) = 32

With DistX in cm the result is in centimeter. Comparing the readings with the 
SRF08 sonar the  differences are within 1 cm.

*******************************************************************************
[4]
In order to have the fastest possible response on avoiding obstacles, the check
is performed every cycle (14ms -> 0,7 cm @ 50cm/s). In case of a very strange
object not recognized by US nor IR, all of the three bumpers are controlled,
setting Dist = 0 if ON.
In any case, if Dist is less then a specific threshold, external operator
is alerted by all led blinking and the navigation board by a further 
transmission.

[4a]
The actual distance from the object is considered as the smallest one between 
the two measures in the same side. 
If distance is out of IR sensors range (greater then 45 cm), only US is used.
MAX distance is 2.55 meters

===============================================================================
[5]
The Vbatt is used as a byte, only 8 bits out of 12 are used from ADC.
When the Vbatt fall under 1,08V per cell (12 cells = 13V) a sound and light
alert occurs.
ADC readings are related to Vbatt with the following table

V	ADC
5	46
6	55
7	65
8	74
9	84
10	93
11	102
12	112
13	121
14	131
15	140
16	149
17	159
18	169
19	178
20	188

===============================================================================

/* SensBrd Version History ////////////////////////////////////////////////////
0.0.1 	- november 2008

